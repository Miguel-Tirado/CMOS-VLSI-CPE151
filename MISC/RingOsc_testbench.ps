%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
rotp
0 18592 52794 19804 clwin
0 18592 52795 19807 clwin
0 18592 52795 19807 clwin
ssls
0 800 400 slc
0 800 400 sfc
1139 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
2253 18946 101 dcu
406 0 2354 18946 dls
2760 18946 dlt
405 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
3874 18946 101 dcu
405 0 3975 18946 dls
4380 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
5494 18946 101 dcu
405 0 5596 18946 dls
6001 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
7115 18946 101 dcu
405 0 7216 18946 dls
7621 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
8735 18946 101 dcu
405 0 8837 18946 dls
9242 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
10356 18946 101 dcu
405 0 10457 18946 dls
10862 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
11976 18946 101 dcu
405 0 12078 18946 dls
12483 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
13597 18946 101 dcu
405 0 13698 18946 dls
14103 18946 dlt
406 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
15218 18946 101 dcu
405 0 15319 18946 dls
15724 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
16838 18946 101 dcu
406 0 16939 18946 dls
17345 18946 dlt
405 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
18459 18946 101 dcu
405 0 18560 18946 dls
18965 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
20079 18946 101 dcu
405 0 20181 18946 dls
20586 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
21700 18946 101 dcu
405 0 21801 18946 dls
22206 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
23320 18946 101 dcu
405 0 23422 18946 dls
23827 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
24941 18946 101 dcu
405 0 25042 18946 dls
25447 18946 dlt
406 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
26562 18946 101 dcu
405 0 26663 18946 dls
27068 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
28182 18946 101 dcu
406 0 28283 18946 dls
28689 18946 dlt
405 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
29803 18946 101 dcu
405 0 29904 18946 dls
30309 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
31423 18946 101 dcu
405 0 31525 18946 dls
31930 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
33044 18946 101 dcu
405 0 33145 18946 dls
33550 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
34664 18946 101 dcu
405 0 34766 18946 dls
35171 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
36285 18946 101 dcu
405 0 36386 18946 dls
36791 18946 dlt
406 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
37906 18946 101 dcu
405 0 38007 18946 dls
38412 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
39526 18946 101 dcu
406 0 39627 18946 dls
40033 18946 dlt
405 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
41147 18946 101 dcu
405 0 41248 18946 dls
41653 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
42767 18946 101 dcu
405 0 42869 18946 dls
43274 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
44388 18946 101 dcu
405 0 44489 18946 dls
44894 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
46008 18946 101 dcu
405 0 46110 18946 dls
46515 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
47629 18946 101 dcu
405 0 47730 18946 dls
48135 18946 dlt
406 0 dlv
0 354 dlv
607 -354 dlv
-607 -354 dlv
0 354 dlv
dle
49250 18946 101 dcu
405 0 49351 18946 dls
49756 18946 dlt
405 0 dlv
0 354 dlv
608 -354 dlv
-608 -354 dlv
0 354 dlv
dle
50870 18946 101 dcu
406 0 50971 18946 dls
0 202 126 19554 dls
253 0 0 19756 dls
224 749 1000 slc
224 749 1000 sfc
0 709 835 18946 dls
304 0 835 18946 dls
34792 0 835 19655 dls
0 152 35627 19655 dls
17168 0 35627 19807 dls
1418 0 51377 18946 dls
0 861 52795 18946 dls
224 749 1000 slc
224 749 1000 sfc
52725 19158 dlt
3 -5 dlv
5 -5 dlv
7 -2 dlv
5 0 dlv
7 2 dlv
5 5 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-5 5 dlv
-7 2 dlv
-5 0 dlv
-7 -2 dlv
-5 -5 dlv
-3 -5 dlv
0 -7 dlv
dle
52733 19218 dlt
-5 -2 dlv
-3 -8 dlv
0 -7 dlv
3 -7 dlv
5 -3 dlv
4 3 dlv
3 5 dlv
2 12 dlv
3 5 dlv
4 2 dlv
3 0 dlv
5 -2 dlv
2 -8 dlv
0 -7 dlv
-2 -7 dlv
-5 -3 dlv
dle
52733 19261 dlt
-5 -4 dlv
-3 -5 dlv
0 -7 dlv
3 -5 dlv
5 -5 dlv
7 -3 dlv
5 0 dlv
7 3 dlv
5 5 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-5 4 dlv
dle
0 39 52764 19271 dls
52725 19336 dlt
3 -5 dlv
5 -4 dlv
7 -3 dlv
5 0 dlv
7 3 dlv
5 4 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-5 5 dlv
-7 2 dlv
-5 0 dlv
-7 -2 dlv
-5 -5 dlv
-3 -5 dlv
0 -7 dlv
dle
52725 19372 dlt
24 0 dlv
8 3 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-8 7 dlv
dle
34 0 52725 19399 dls
52708 19421 dlt
41 0 dlv
8 2 dlv
2 5 dlv
0 5 dlv
dle
0 17 52725 19413 dls
51 0 52725 19447 dls
52733 19447 dlt
-5 5 dlv
-3 5 dlv
0 7 dlv
3 5 dlv
5 5 dlv
7 2 dlv
5 0 dlv
7 -2 dlv
5 -5 dlv
2 -5 dlv
0 -7 dlv
-2 -5 dlv
-5 -5 dlv
dle
52725 19493 dlt
24 0 dlv
8 2 dlv
2 5 dlv
0 7 dlv
-2 5 dlv
-8 7 dlv
dle
34 0 52725 19519 dls
52708 19541 dlt
41 0 dlv
8 3 dlv
2 4 dlv
0 5 dlv
dle
0 17 52725 19534 dls
1000 0 0 slc
1000 0 0 sfc
180 19679 dlt
10 -24 dlv
10 24 dlv
dle
0 -35 229 19690 dls
229 19674 dlt
-3 3 dlv
-4 2 dlv
-5 0 dlv
-3 -2 dlv
-3 -3 dlv
-2 -5 dlv
0 -4 dlv
2 -5 dlv
3 -3 dlv
3 -2 dlv
5 0 dlv
4 2 dlv
3 3 dlv
dle
0 -35 261 19690 dls
261 19674 dlt
-3 3 dlv
-4 2 dlv
-5 0 dlv
-3 -2 dlv
-3 -3 dlv
-2 -5 dlv
0 -4 dlv
2 -5 dlv
3 -3 dlv
3 -2 dlv
5 0 dlv
4 2 dlv
3 3 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1119 18926 1159 18966 dbs
2739 18926 2780 18966 dbs
2739 18926 2780 18966 dbs
4360 18926 4400 18966 dbs
4360 18926 4400 18966 dbs
5980 18926 6021 18966 dbs
5980 18926 6021 18966 dbs
7601 18926 7641 18966 dbs
7601 18926 7641 18966 dbs
9222 18926 9262 18966 dbs
9222 18926 9262 18966 dbs
10842 18926 10883 18966 dbs
10842 18926 10883 18966 dbs
12463 18926 12503 18966 dbs
12463 18926 12503 18966 dbs
14083 18926 14124 18966 dbs
14083 18926 14124 18966 dbs
15704 18926 15744 18966 dbs
15704 18926 15744 18966 dbs
17324 18926 17365 18966 dbs
17324 18926 17365 18966 dbs
18945 18926 18985 18966 dbs
18945 18926 18985 18966 dbs
20565 18926 20606 18966 dbs
20565 18926 20606 18966 dbs
22186 18926 22227 18966 dbs
22186 18926 22227 18966 dbs
23807 18926 23847 18966 dbs
23807 18926 23847 18966 dbs
25427 18926 25468 18966 dbs
25427 18926 25468 18966 dbs
27048 18926 27088 18966 dbs
27048 18926 27088 18966 dbs
28668 18926 28709 18966 dbs
28668 18926 28709 18966 dbs
30289 18926 30329 18966 dbs
30289 18926 30329 18966 dbs
31909 18926 31950 18966 dbs
31909 18926 31950 18966 dbs
33530 18926 33571 18966 dbs
33530 18926 33571 18966 dbs
35151 18926 35191 18966 dbs
35151 18926 35191 18966 dbs
36771 18926 36812 18966 dbs
36771 18926 36812 18966 dbs
38392 18926 38432 18966 dbs
38392 18926 38432 18966 dbs
40012 18926 40053 18966 dbs
40012 18926 40053 18966 dbs
41633 18926 41673 18966 dbs
41633 18926 41673 18966 dbs
43253 18926 43294 18966 dbs
43253 18926 43294 18966 dbs
44874 18926 44914 18966 dbs
44874 18926 44914 18966 dbs
46495 18926 46535 18966 dbs
46495 18926 46535 18966 dbs
48115 18926 48156 18966 dbs
48115 18926 48156 18966 dbs
49736 18926 49776 18966 dbs
49736 18926 49776 18966 dbs
51356 18926 51397 18966 dbs
106 19533 146 19574 dbs
0 18592 52795 19808 clwin
gfs
%%Trailer
%%EOF
