%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
rotp
0 8899 52723 29501 clwin
0 8899 52737 29476 clwin
0 8899 52737 29476 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
48221 20554 dlt
-46 47 dlv
-47 24 dlv
-71 0 dlv
-47 -24 dlv
-47 -47 dlv
-23 -70 dlv
0 -47 dlv
23 -70 dlv
47 -47 dlv
47 -24 dlv
71 0 dlv
47 24 dlv
46 47 dlv
dle
48409 20625 dlt
-23 -24 dlv
23 -23 dlv
24 23 dlv
-24 24 dlv
dle
48409 20343 dlt
-23 -23 dlv
23 -24 dlv
24 24 dlv
-24 23 dlv
dle
48667 20695 dlt
47 24 dlv
71 70 dlv
0 -493 dlv
dle
0 -493 49019 20625 dls
49019 20554 dlt
47 47 dlv
47 24 dlv
71 0 dlv
47 -24 dlv
47 -47 dlv
23 -70 dlv
0 -47 dlv
-23 -70 dlv
-47 -47 dlv
-47 -24 dlv
-71 0 dlv
-47 24 dlv
-47 47 dlv
dle
8487 22473 dlt
141 -329 dlv
140 329 dlv
dle
0 -493 9167 22637 dls
9167 22403 dlt
-46 46 dlv
-47 24 dlv
-71 0 dlv
-47 -24 dlv
-47 -46 dlv
-23 -71 dlv
0 -47 dlv
23 -70 dlv
47 -47 dlv
47 -24 dlv
71 0 dlv
47 24 dlv
46 47 dlv
dle
9613 22403 dlt
-47 46 dlv
-46 24 dlv
-71 0 dlv
-47 -24 dlv
-47 -46 dlv
-23 -71 dlv
0 -47 dlv
23 -70 dlv
47 -47 dlv
47 -24 dlv
71 0 dlv
46 24 dlv
47 47 dlv
dle
422 0 9778 22426 dls
422 0 9778 22285 dls
10435 22543 dlt
47 24 dlv
70 70 dlv
0 -493 dlv
dle
10810 22191 dlt
-23 -23 dlv
23 -24 dlv
24 24 dlv
-24 23 dlv
dle
11115 22637 dlt
-70 -23 dlv
-23 -47 dlv
0 -47 dlv
23 -47 dlv
47 -24 dlv
94 -23 dlv
70 -23 dlv
47 -47 dlv
24 -47 dlv
0 -71 dlv
-24 -47 dlv
-23 -23 dlv
-71 -24 dlv
-94 0 dlv
-70 24 dlv
-23 23 dlv
-24 47 dlv
0 71 dlv
24 47 dlv
47 47 dlv
70 23 dlv
94 23 dlv
47 24 dlv
23 47 dlv
0 47 dlv
-23 47 dlv
-71 23 dlv
-94 0 dlv
dle
15950 15244 dlt
0 -399 dlv
24 -70 dlv
47 -24 dlv
47 0 dlv
dle
164 0 15880 15080 dls
0 -329 16208 15080 dls
16208 14939 dlt
24 70 dlv
47 47 dlv
47 24 dlv
70 0 dlv
dle
422 0 16514 15033 dls
422 0 16514 14892 dls
17171 15150 dlt
47 24 dlv
70 70 dlv
0 -493 dlv
dle
0 -493 17523 15080 dls
17523 15009 dlt
47 47 dlv
47 24 dlv
70 0 dlv
47 -24 dlv
47 -47 dlv
23 -70 dlv
0 -47 dlv
-23 -70 dlv
-47 -47 dlv
-47 -24 dlv
-70 0 dlv
-47 24 dlv
-47 47 dlv
dle
15880 16004 dlt
141 -329 dlv
141 329 dlv
dle
16302 16051 dlt
0 23 dlv
24 47 dlv
23 24 dlv
47 23 dlv
94 0 dlv
47 -23 dlv
23 -24 dlv
24 -47 dlv
0 -46 dlv
-24 -47 dlv
-46 -71 dlv
-235 -235 dlv
328 0 dlv
dle
422 0 16772 15957 dls
422 0 16772 15816 dls
17429 16074 dlt
47 24 dlv
70 70 dlv
0 -493 dlv
dle
17804 15722 dlt
-23 -23 dlv
23 -24 dlv
24 24 dlv
-24 23 dlv
dle
18110 16168 dlt
-71 -23 dlv
-23 -47 dlv
0 -47 dlv
23 -47 dlv
47 -23 dlv
94 -24 dlv
70 -23 dlv
47 -47 dlv
24 -47 dlv
0 -71 dlv
-24 -47 dlv
-23 -23 dlv
-71 -24 dlv
-93 0 dlv
-71 24 dlv
-23 23 dlv
-24 47 dlv
0 71 dlv
24 47 dlv
47 47 dlv
70 23 dlv
94 24 dlv
47 23 dlv
23 47 dlv
0 47 dlv
-23 47 dlv
-71 23 dlv
-93 0 dlv
dle
15880 16928 dlt
141 -328 dlv
141 328 dlv
dle
16349 16999 dlt
47 23 dlv
71 70 dlv
0 -492 dlv
dle
16725 16928 dlt
-24 -23 dlv
24 -24 dlv
23 24 dlv
-23 23 dlv
dle
16725 16647 dlt
-24 -24 dlv
24 -23 dlv
23 23 dlv
-23 24 dlv
dle
17053 17092 dlt
-70 -23 dlv
-47 -70 dlv
-23 -118 dlv
0 -70 dlv
23 -118 dlv
47 -70 dlv
70 -23 dlv
47 0 dlv
71 23 dlv
47 70 dlv
23 118 dlv
0 70 dlv
-23 118 dlv
-47 70 dlv
-71 23 dlv
-47 0 dlv
dle
-328 -492 17241 17092 dls
21495 15244 dlt
0 -399 dlv
24 -70 dlv
46 -24 dlv
47 0 dlv
dle
164 0 21425 15080 dls
0 -329 21753 15080 dls
21753 14939 dlt
24 70 dlv
47 47 dlv
47 24 dlv
70 0 dlv
dle
423 0 22058 15033 dls
423 0 22058 14892 dls
22715 15150 dlt
47 24 dlv
71 70 dlv
0 -493 dlv
dle
0 -493 23068 15080 dls
23068 15009 dlt
46 47 dlv
47 24 dlv
71 0 dlv
47 -24 dlv
47 -47 dlv
23 -70 dlv
0 -47 dlv
-23 -70 dlv
-47 -47 dlv
-47 -24 dlv
-71 0 dlv
-47 24 dlv
-46 47 dlv
dle
21425 16004 dlt
140 -329 dlv
141 329 dlv
dle
21847 16051 dlt
0 23 dlv
24 47 dlv
23 24 dlv
47 23 dlv
94 0 dlv
47 -23 dlv
23 -24 dlv
24 -47 dlv
0 -46 dlv
-24 -47 dlv
-47 -71 dlv
-234 -235 dlv
328 0 dlv
dle
423 0 22316 15957 dls
423 0 22316 15816 dls
22974 16074 dlt
47 24 dlv
70 70 dlv
0 -493 dlv
dle
23349 15722 dlt
-23 -23 dlv
23 -24 dlv
24 24 dlv
-24 23 dlv
dle
23654 16168 dlt
-70 -23 dlv
-24 -47 dlv
0 -47 dlv
24 -47 dlv
47 -23 dlv
94 -24 dlv
70 -23 dlv
47 -47 dlv
24 -47 dlv
0 -71 dlv
-24 -47 dlv
-23 -23 dlv
-71 -24 dlv
-94 0 dlv
-70 24 dlv
-24 23 dlv
-23 47 dlv
0 71 dlv
23 47 dlv
47 47 dlv
71 23 dlv
94 24 dlv
47 23 dlv
23 47 dlv
0 47 dlv
-23 47 dlv
-71 23 dlv
-94 0 dlv
dle
21425 16928 dlt
140 -328 dlv
141 328 dlv
dle
21894 16999 dlt
47 23 dlv
70 70 dlv
0 -492 dlv
dle
22270 16928 dlt
-24 -23 dlv
24 -24 dlv
23 24 dlv
-23 23 dlv
dle
22270 16647 dlt
-24 -24 dlv
24 -23 dlv
23 23 dlv
-23 24 dlv
dle
22598 17092 dlt
-70 -23 dlv
-47 -70 dlv
-24 -118 dlv
0 -70 dlv
24 -118 dlv
47 -70 dlv
70 -23 dlv
47 0 dlv
70 23 dlv
47 70 dlv
24 118 dlv
0 70 dlv
-24 118 dlv
-47 70 dlv
-70 23 dlv
-47 0 dlv
dle
-329 -492 22786 17092 dls
1000 0 0 slc
1000 0 0 sfc
47984 21596 dlt
-24 47 dlv
-47 47 dlv
-47 23 dlv
-93 0 dlv
-47 -23 dlv
-47 -47 dlv
-24 -47 dlv
-23 -71 dlv
0 -117 dlv
23 -70 dlv
24 -47 dlv
47 -47 dlv
47 -24 dlv
93 0 dlv
47 24 dlv
47 47 dlv
24 47 dlv
dle
48265 21713 dlt
-70 -23 dlv
-47 -71 dlv
-23 -117 dlv
0 -71 dlv
23 -117 dlv
47 -70 dlv
70 -24 dlv
47 0 dlv
71 24 dlv
47 70 dlv
23 117 dlv
0 71 dlv
-23 117 dlv
-47 71 dlv
-71 23 dlv
-47 0 dlv
dle
-328 -493 48453 21713 dls
7847 23561 dlt
188 -493 dlv
188 493 dlv
dle
8457 23561 dlt
-70 -23 dlv
-47 -71 dlv
-23 -117 dlv
0 -70 dlv
23 -118 dlv
47 -70 dlv
70 -24 dlv
47 0 dlv
71 24 dlv
47 70 dlv
23 118 dlv
0 70 dlv
-23 117 dlv
-47 71 dlv
-71 23 dlv
-47 0 dlv
dle
-328 -493 8645 23561 dls
15548 18017 dlt
188 -493 dlv
188 493 dlv
dle
16088 17923 dlt
47 23 dlv
71 71 dlv
0 -493 dlv
dle
21093 18017 dlt
188 -493 dlv
188 493 dlv
dle
21586 17899 dlt
0 24 dlv
23 47 dlv
24 23 dlv
47 24 dlv
94 0 dlv
47 -24 dlv
23 -23 dlv
24 -47 dlv
0 -47 dlv
-24 -47 dlv
-47 -71 dlv
-234 -234 dlv
328 0 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -1971 46945 20111 dls
0 -1355 46945 21836 dls
46945 19248 862 862 44 135 dau
-1232 0 47561 20481 dls
0 -1848 27231 11363 dls
26614 9515 dpb
27847 9515 dpv
27231 8899 dpv
dpu
0 -1232 7516 21220 dls
0 1233 7516 22452 dls
0 369 7516 21960 dls
-370 0 7701 21528 dls
-370 0 7701 22144 dls
7515 21836 677 616 delu
12999 16107 dlt
185 0 dlv
0 369 dlv
246 0 dlv
0 -369 dlv
247 0 dlv
0 369 dlv
246 0 dlv
0 -369 dlv
185 0 dlv
dle
0 -1232 14909 15675 dls
0 1232 14909 16908 dls
0 369 14909 16415 dls
-370 0 15094 16600 dls
-370 0 15094 15983 dls
14908 16291 677 616 delu
18544 16107 dlt
185 0 dlv
0 369 dlv
246 0 dlv
0 -369 dlv
246 0 dlv
0 369 dlv
247 0 dlv
0 -369 dlv
185 0 dlv
dle
0 -1232 20454 15675 dls
0 1232 20454 16908 dls
0 369 20454 16415 dls
-369 0 20638 16600 dls
-369 0 20638 15983 dls
20453 16291 677 616 delu
2464 0 24150 23685 dls
2464 0 24150 22452 dls
0 2464 32775 16292 dls
0 -2464 32775 29229 dls
8009 12322 26614 18756 dbu
-2465 0 41401 23685 dls
0 800 400 slc
0 800 400 sfc
30952 22922 dlt
0 29 dlv
29 59 dlv
30 29 dlv
58 29 dlv
118 0 dlv
58 -29 dlv
30 -29 dlv
29 -59 dlv
0 -59 dlv
-29 -58 dlv
-59 -88 dlv
-293 -294 dlv
410 0 dlv
dle
528 0 31539 22716 dls
32301 22452 dlt
0 616 dlv
411 -616 dlv
0 616 dlv
dle
32859 22452 dlt
235 616 dlv
234 -616 dlv
dle
293 0 32947 22658 dls
33504 22452 dlt
0 616 dlv
411 -616 dlv
0 616 dlv
dle
34150 22452 dlt
0 616 dlv
205 0 dlv
88 -29 dlv
59 -59 dlv
29 -58 dlv
29 -88 dlv
0 -147 dlv
-29 -88 dlv
-29 -59 dlv
-59 -58 dlv
-88 -30 dlv
-205 0 dlv
dle
224 749 1000 slc
224 749 1000 sfc
0 8625 7516 11363 dls
5545 0 14909 11363 dls
7393 0 7516 11363 dls
0 3080 14909 11363 dls
14909 11363 308 dcs
6777 0 20454 11363 dls
0 3080 20454 11363 dls
20454 11363 308 dcs
0 5545 14909 18140 dls
0 4312 20454 18140 dls
3696 0 20454 22452 dls
5544 0 27231 11363 dls
0 4929 32775 11363 dls
14170 0 32775 11363 dls
32775 11363 308 dcs
0 6777 46945 11363 dls
5544 0 41401 23685 dls
0 1849 46945 21836 dls
9241 0 14909 23685 dls
0 5544 7516 23685 dls
25259 0 7516 29229 dls
224 749 1000 slc
224 749 1000 sfc
19710 23500 dlt
29 -30 dlv
30 30 dlv
-30 29 dlv
-29 -29 dlv
dle
0 -410 19739 23294 dls
0 -410 19974 23294 dls
19974 23177 dlt
88 88 dlv
59 29 dlv
88 0 dlv
58 -29 dlv
30 -88 dlv
0 -293 dlv
dle
0 -616 20531 23294 dls
20531 23206 dlt
59 59 dlv
59 29 dlv
88 0 dlv
58 -29 dlv
59 -59 dlv
29 -88 dlv
0 -58 dlv
-29 -88 dlv
-59 -59 dlv
-58 -29 dlv
-88 0 dlv
-59 29 dlv
-59 59 dlv
dle
21089 23294 dlt
0 -293 dlv
29 -88 dlv
59 -29 dlv
88 0 dlv
58 29 dlv
88 88 dlv
dle
0 -410 21411 23294 dls
21675 23500 dlt
0 -499 dlv
30 -88 dlv
58 -29 dlv
59 0 dlv
dle
206 0 21587 23294 dls
21998 23353 dlt
0 29 dlv
30 59 dlv
29 29 dlv
59 30 dlv
117 0 dlv
59 -30 dlv
29 -29 dlv
29 -59 dlv
0 -58 dlv
-29 -59 dlv
-59 -88 dlv
-293 -293 dlv
411 0 dlv
dle
42590 24527 dlt
-59 -30 dlv
-58 -58 dlv
-30 -88 dlv
0 -59 dlv
30 -88 dlv
58 -59 dlv
59 -29 dlv
88 0 dlv
59 29 dlv
59 59 dlv
29 88 dlv
0 59 dlv
-29 88 dlv
-59 58 dlv
-59 30 dlv
-88 0 dlv
dle
43030 24527 dlt
0 -294 dlv
30 -88 dlv
58 -29 dlv
88 0 dlv
59 29 dlv
88 88 dlv
dle
0 -411 43353 24527 dls
43617 24732 dlt
0 -499 dlv
29 -88 dlv
59 -29 dlv
59 0 dlv
dle
205 0 43529 24527 dls
0 -617 43940 24527 dls
43940 24439 dlt
58 58 dlv
59 30 dlv
88 0 dlv
59 -30 dlv
58 -58 dlv
30 -88 dlv
0 -59 dlv
-30 -88 dlv
-58 -59 dlv
-59 -29 dlv
-88 0 dlv
-59 29 dlv
-58 59 dlv
dle
44497 24527 dlt
0 -294 dlv
29 -88 dlv
59 -29 dlv
88 0 dlv
59 29 dlv
88 88 dlv
dle
0 -411 44820 24527 dls
45084 24732 dlt
0 -499 dlv
29 -88 dlv
59 -29 dlv
59 0 dlv
dle
205 0 44996 24527 dls
16660 24732 dlt
30 -29 dlv
29 29 dlv
-29 29 dlv
-30 -29 dlv
dle
0 -411 16690 24527 dls
0 -411 16924 24527 dls
16924 24409 dlt
88 88 dlv
59 30 dlv
88 0 dlv
59 -30 dlv
29 -88 dlv
0 -293 dlv
dle
0 -617 17482 24527 dls
17482 24439 dlt
58 58 dlv
59 30 dlv
88 0 dlv
59 -30 dlv
58 -58 dlv
30 -88 dlv
0 -59 dlv
-30 -88 dlv
-58 -59 dlv
-59 -29 dlv
-88 0 dlv
-59 29 dlv
-58 59 dlv
dle
18039 24527 dlt
0 -294 dlv
29 -88 dlv
59 -29 dlv
88 0 dlv
59 29 dlv
88 88 dlv
dle
0 -411 18362 24527 dls
18626 24732 dlt
0 -499 dlv
29 -88 dlv
59 -29 dlv
59 0 dlv
dle
205 0 18538 24527 dls
19007 24615 dlt
59 29 dlv
88 88 dlv
0 -616 dlv
dle
1000 0 0 slc
1000 0 0 sfc
28155 10418 dlt
0 -328 dlv
-21 -62 dlv
-20 -21 dlv
-41 -20 dlv
-62 0 dlv
-41 20 dlv
dle
28155 10357 dlt
-41 41 dlv
-41 20 dlv
-62 0 dlv
-41 -20 dlv
-41 -41 dlv
-21 -62 dlv
0 -41 dlv
21 -62 dlv
41 -41 dlv
41 -20 dlv
62 0 dlv
41 20 dlv
41 41 dlv
dle
0 -287 28319 10418 dls
28319 10336 dlt
62 62 dlv
41 20 dlv
61 0 dlv
41 -20 dlv
21 -62 dlv
0 -205 dlv
dle
0 -431 28935 10562 dls
28935 10357 dlt
-41 41 dlv
-41 20 dlv
-62 0 dlv
-41 -20 dlv
-41 -41 dlv
-20 -62 dlv
0 -41 dlv
20 -62 dlv
41 -41 dlv
41 -20 dlv
62 0 dlv
41 20 dlv
41 41 dlv
dle
0 -411 27424 23890 dls
27424 23802 dlt
-59 59 dlv
-58 29 dlv
-88 0 dlv
-59 -29 dlv
-59 -59 dlv
-29 -88 dlv
0 -59 dlv
29 -88 dlv
59 -58 dlv
59 -30 dlv
88 0 dlv
58 30 dlv
59 58 dlv
dle
0 -616 27101 22760 dls
27101 22467 dlt
59 59 dlv
59 29 dlv
88 0 dlv
58 -29 dlv
59 -59 dlv
29 -88 dlv
0 -59 dlv
-29 -88 dlv
-59 -58 dlv
-58 -30 dlv
-88 0 dlv
-59 30 dlv
-59 58 dlv
dle
32570 19184 dlt
411 176 dlv
-411 176 dlv
dle
32658 20006 dlt
-59 -30 dlv
-29 -88 dlv
0 -88 dlv
29 -88 dlv
59 -29 dlv
59 29 dlv
29 59 dlv
29 147 dlv
30 58 dlv
58 30 dlv
30 0 dlv
58 -30 dlv
30 -88 dlv
0 -88 dlv
-30 -88 dlv
-58 -29 dlv
dle
32658 20504 dlt
-59 -29 dlv
-29 -88 dlv
0 -88 dlv
29 -88 dlv
59 -29 dlv
59 29 dlv
29 59 dlv
29 146 dlv
30 59 dlv
58 29 dlv
30 0 dlv
58 -29 dlv
30 -88 dlv
0 -88 dlv
-30 -88 dlv
-58 -29 dlv
dle
32673 24791 dlt
410 176 dlv
-410 176 dlv
dle
616 0 32467 25641 dls
32761 25641 dlt
-59 -58 dlv
-29 -59 dlv
0 -88 dlv
29 -59 dlv
59 -58 dlv
88 -30 dlv
58 0 dlv
88 30 dlv
59 58 dlv
29 59 dlv
0 88 dlv
-29 59 dlv
-59 58 dlv
dle
616 0 32467 26199 dls
32761 26199 dlt
-59 -59 dlv
-29 -59 dlv
0 -88 dlv
29 -58 dlv
59 -59 dlv
88 -29 dlv
58 0 dlv
88 29 dlv
59 59 dlv
29 58 dlv
0 88 dlv
-29 59 dlv
-59 59 dlv
dle
35782 23787 dlt
-58 -29 dlv
-59 -59 dlv
-29 -88 dlv
0 -58 dlv
29 -88 dlv
59 -59 dlv
58 -29 dlv
88 0 dlv
59 29 dlv
59 59 dlv
29 88 dlv
0 58 dlv
-29 88 dlv
-59 59 dlv
-59 29 dlv
-88 0 dlv
dle
36222 23787 dlt
0 -293 dlv
30 -88 dlv
58 -29 dlv
88 0 dlv
59 29 dlv
88 88 dlv
dle
0 -410 36545 23787 dls
36809 23993 dlt
0 -499 dlv
30 -88 dlv
58 -29 dlv
59 0 dlv
dle
206 0 36721 23787 dls
0 -616 37132 23787 dls
37132 23699 dlt
59 59 dlv
58 29 dlv
88 0 dlv
59 -29 dlv
59 -59 dlv
29 -88 dlv
0 -58 dlv
-29 -88 dlv
-59 -59 dlv
-59 -29 dlv
-88 0 dlv
-58 29 dlv
-59 59 dlv
dle
37689 23787 dlt
0 -293 dlv
30 -88 dlv
58 -29 dlv
88 0 dlv
59 29 dlv
88 88 dlv
dle
0 -410 38012 23787 dls
38276 23993 dlt
0 -499 dlv
29 -88 dlv
59 -29 dlv
59 0 dlv
dle
205 0 38188 23787 dls
1000 0 0 slc
1000 0 0 sfc
46699 18386 dpb
47192 18386 dpv
47192 17893 dpv
46699 17893 dpv
dps
46699 22083 dpb
47192 22083 dpv
47192 21590 dpv
46699 21590 dpv
dps
26984 11116 27477 11609 dbs
7269 23438 7762 23931 dbs
7269 19742 7762 20234 dbs
14662 17893 15155 18386 dbs
14662 14197 15155 14690 dbs
20207 17893 20700 18386 dbs
20207 14197 20700 14690 dbs
23904 23438 24397 23931 dbs
23904 22206 24397 22699 dbs
32529 16045 33022 16538 dbs
32529 28983 33022 29476 dbs
41154 23438 41647 23931 dbs
0 8899 52737 29501 clwin
gfs
%%Trailer
%%EOF
