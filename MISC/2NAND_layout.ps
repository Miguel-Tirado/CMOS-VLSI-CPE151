%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
3587 2 34809 52795 clwin
3587 2 34809 52794 clwin
3587 0 34809 52797 clwin
1 fds
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 <8888> fdf
1 <4444> fdf
1 <2222> fdf
1 <1111> fdf
1 fde
1 sfp
0 800 400 slc
0 800 400 sfc
ssls
10325 47096 13235 50006 dbf
2910 2910 10325 47096 dbu
13235 37396 20995 50006 dbf
12610 7760 13235 37396 dbu
2 fds
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 <aaaa> fdf
2 <7777> fdf
2 <aaaa> fdf
2 <dddd> fdf
2 fde
2 sfp
0 800 400 slc
0 800 400 sfc
11295 48066 12265 49036 dbf
970 970 11295 48066 dbu
14690 13390 19540 27939 dbf
14549 4850 14690 13390 dbu
1000 502 0 slc
1000 502 0 sfc
12750 13268 13720 14238 dbf
970 970 12750 13268 dbu
14690 38851 19540 48551 dbf
9700 4850 14690 38851 dbu
0 800 400 slc
0 800 400 sfc
1940 1940 10810 47581 dbu
15762 5820 14205 12783 dbu
1000 502 0 slc
1000 502 0 sfc
1940 1940 12265 12783 dbu
10912 5820 14205 38245 dbu
3 fds
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 <aaaa> fdf
3 <5555> fdf
3 fde
3 sfp
1000 0 0 slc
1000 0 0 sfc
15902 7085 16387 49157 dbf
42072 485 15902 7085 dbu
17842 2720 18327 49157 dbf
46437 485 17842 2720 dbu
15660 6842 16630 7812 dbf
970 970 15660 6842 dbu
17600 2478 18570 3448 dbf
970 970 17600 2478 dbu
15902 12783 16387 28545 dbf
15762 485 15902 12783 dbu
17842 12783 18327 28545 dbf
15762 485 17842 12783 dbu
15902 38245 16387 49157 dbf
10912 485 15902 38245 dbu
17842 38245 18327 49157 dbf
10912 485 17842 38245 dbu
4 fds
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 <1111> fdf
4 <2222> fdf
4 <4444> fdf
4 <8888> fdf
4 fde
4 sfp
0 0 1000 slc
0 0 1000 sfc
11295 48066 12265 52794 dbf
4728 970 11295 48066 dbu
11295 48066 12265 49036 dbf
970 970 11295 48066 dbu
12750 9389 13720 14238 dbf
4849 970 12750 9389 dbu
12750 13268 13720 14238 dbf
970 970 12750 13268 dbu
12750 9389 15660 10359 dbf
970 2910 12750 9389 dbu
14690 9389 15660 27939 dbf
18550 970 14690 9389 dbu
14690 32668 15660 48551 dbf
15883 970 14690 32668 dbu
15660 6842 16630 7812 dbf
970 970 15660 6842 dbu
11295 51824 17600 52794 dbf
970 6305 11295 51824 dbu
16630 38851 17600 52794 dbf
13943 970 16630 38851 dbu
17600 2478 18570 3448 dbf
970 970 17600 2478 dbu
18570 13390 19540 48551 dbf
35161 970 18570 13390 dbu
14690 32668 25844 33638 dbf
970 11154 14690 32668 dbu
16630 32668 25844 33638 dbf
970 9214 16630 32668 dbu
24753 32668 25844 33638 dbf
970 1091 24753 32668 dbu
11295 48066 12265 49036 dbf
970 970 11295 48066 dbu
12750 13268 13720 14238 dbf
970 970 12750 13268 dbu
15660 6842 16630 7812 dbf
970 970 15660 6842 dbu
17600 2478 18570 3448 dbf
970 970 17600 2478 dbu
14690 13390 15660 27939 dbf
14549 970 14690 13390 dbu
16630 13390 17600 27939 dbf
14549 970 16630 13390 dbu
18570 13390 19540 27939 dbf
14549 970 18570 13390 dbu
14690 38851 15660 48551 dbf
9700 970 14690 38851 dbu
16630 38851 17600 48551 dbf
9700 970 16630 38851 dbu
18570 38851 19540 48551 dbf
9700 970 18570 38851 dbu
502 149 149 slc
0 0 0 sfc
11537 48308 12022 48793 dbs
12992 13511 13477 13996 dbs
15902 7085 16387 7570 dbs
17842 2720 18327 3205 dbs
14932 26727 15417 27212 dbs
14932 25272 15417 25757 dbs
14932 23817 15417 24302 dbs
14932 22362 15417 22847 dbs
14932 20907 15417 21392 dbs
14932 19452 15417 19937 dbs
14932 17997 15417 18482 dbs
14932 16542 15417 17027 dbs
14932 15087 15417 15572 dbs
14932 13632 15417 14117 dbs
16872 26727 17357 27212 dbs
16872 25272 17357 25757 dbs
16872 23817 17357 24302 dbs
16872 22362 17357 22847 dbs
16872 20907 17357 21392 dbs
16872 19452 17357 19937 dbs
16872 17997 17357 18482 dbs
16872 16542 17357 17027 dbs
16872 15087 17357 15572 dbs
16872 13632 17357 14117 dbs
18812 26727 19297 27212 dbs
18812 25272 19297 25757 dbs
18812 23817 19297 24302 dbs
18812 22362 19297 22847 dbs
18812 20907 19297 21392 dbs
18812 19452 19297 19937 dbs
18812 17997 19297 18482 dbs
18812 16542 19297 17027 dbs
18812 15087 19297 15572 dbs
18812 13632 19297 14117 dbs
14932 46368 15417 46853 dbs
14932 44913 15417 45398 dbs
14932 43458 15417 43943 dbs
14932 42004 15417 42489 dbs
14932 40549 15417 41034 dbs
14932 39094 15417 39579 dbs
16872 46368 17357 46853 dbs
16872 44913 17357 45398 dbs
16872 43458 17357 43943 dbs
16872 42004 17357 42489 dbs
16872 40549 17357 41034 dbs
16872 39094 17357 39579 dbs
18812 46368 19297 46853 dbs
18812 44913 19297 45398 dbs
18812 43458 19297 43943 dbs
18812 42004 19297 42489 dbs
18812 40549 19297 41034 dbs
18812 39094 19297 39579 dbs
1000 1000 1000 slc
1000 1000 1000 sfc
0 -1797 18425 1800 dls
18425 1415 dlt
-257 256 dlv
-256 129 dlv
-385 0 dlv
-257 -129 dlv
-256 -256 dlv
-129 -385 dlv
0 -257 dlv
129 -385 dlv
256 -256 dlv
257 -129 dlv
385 0 dlv
256 129 dlv
257 256 dlv
dle
0 -2694 14953 6856 dls
14953 5573 dlt
256 256 dlv
257 129 dlv
385 0 dlv
256 -129 dlv
257 -256 dlv
128 -385 dlv
0 -257 dlv
-128 -385 dlv
-257 -256 dlv
-256 -128 dlv
-385 0 dlv
-257 128 dlv
-256 256 dlv
dle
5675 14894 dlt
770 -1796 dlv
770 1796 dlv
dle
9268 14509 dlt
-129 257 dlv
-385 128 dlv
-384 0 dlv
-385 -128 dlv
-129 -257 dlv
129 -256 dlv
256 -129 dlv
642 -128 dlv
256 -128 dlv
129 -257 dlv
0 -128 dlv
-129 -257 dlv
-385 -128 dlv
-384 0 dlv
-385 128 dlv
-129 257 dlv
dle
11449 14509 dlt
-128 257 dlv
-385 128 dlv
-385 0 dlv
-385 -128 dlv
-128 -257 dlv
128 -256 dlv
256 -129 dlv
642 -128 dlv
257 -128 dlv
128 -257 dlv
0 -128 dlv
-128 -257 dlv
-385 -128 dlv
-385 0 dlv
-385 128 dlv
-128 257 dlv
dle
23000 32389 dlt
-256 -128 dlv
-257 -257 dlv
-128 -385 dlv
0 -256 dlv
128 -385 dlv
257 -257 dlv
256 -128 dlv
385 0 dlv
257 128 dlv
257 257 dlv
128 385 dlv
0 256 dlv
-128 385 dlv
-257 257 dlv
-257 128 dlv
-385 0 dlv
dle
24925 32389 dlt
0 -1283 dlv
128 -385 dlv
257 -128 dlv
385 0 dlv
256 128 dlv
385 385 dlv
dle
0 -1796 26336 32389 dls
27491 33287 dlt
0 -2181 dlv
128 -385 dlv
257 -128 dlv
257 0 dlv
dle
898 0 27106 32389 dls
0 -2694 28902 32389 dls
28902 32004 dlt
257 257 dlv
257 128 dlv
384 0 dlv
257 -128 dlv
257 -257 dlv
128 -385 dlv
0 -256 dlv
-128 -385 dlv
-257 -257 dlv
-257 -128 dlv
-384 0 dlv
-257 128 dlv
-257 257 dlv
dle
31340 32389 dlt
0 -1283 dlv
128 -385 dlv
257 -128 dlv
385 0 dlv
256 128 dlv
385 385 dlv
dle
0 -1796 32751 32389 dls
33906 33287 dlt
0 -2181 dlv
128 -385 dlv
257 -128 dlv
257 0 dlv
dle
898 0 33521 32389 dls
3843 49000 dlt
770 -1796 dlv
770 1796 dlv
dle
0 -2694 7564 49898 dls
7564 48615 dlt
-257 257 dlv
-256 128 dlv
-385 0 dlv
-257 -128 dlv
-256 -257 dlv
-129 -385 dlv
0 -257 dlv
129 -384 dlv
256 -257 dlv
257 -128 dlv
385 0 dlv
256 128 dlv
257 257 dlv
dle
0 -2694 10002 49898 dls
10002 48615 dlt
-257 257 dlv
-257 128 dlv
-385 0 dlv
-256 -128 dlv
-257 -257 dlv
-128 -385 dlv
0 -257 dlv
128 -384 dlv
257 -257 dlv
256 -128 dlv
385 0 dlv
257 128 dlv
257 257 dlv
dle
0 0 1000 slc
0 0 1000 sfc
14549 970 14690 13390 dbu
970 14549 14690 13390 dls
970 -14549 14690 27939 dls
14549 970 16630 13390 dbu
970 14549 16630 13390 dls
970 -14549 16630 27939 dls
14549 970 18570 13390 dbu
970 14549 18570 13390 dls
970 -14549 18570 27939 dls
9700 970 14690 38851 dbu
970 9700 14690 38851 dls
970 -9700 14690 48551 dls
9700 970 16630 38851 dbu
970 9700 16630 38851 dls
970 -9700 16630 48551 dls
9700 970 18570 38851 dbu
970 9700 18570 38851 dls
970 -9700 18570 48551 dls
1000 0 0 slc
1000 0 0 sfc
15762 485 15902 12783 dbu
485 15762 15902 12783 dls
485 -15762 15902 28545 dls
15762 485 17842 12783 dbu
485 15762 17842 12783 dls
485 -15762 17842 28545 dls
10912 485 15902 38245 dbu
485 10912 15902 38245 dls
485 -10912 15902 49157 dls
10912 485 17842 38245 dbu
485 10912 17842 38245 dls
485 -10912 17842 49157 dls
3587 0 34809 52800 clwin
gfs
%%Trailer
%%EOF
