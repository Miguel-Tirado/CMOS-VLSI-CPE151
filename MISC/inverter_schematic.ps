%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
0 0 38400 52800 4800 pap
%%Page: cds 1
gis
rotp
3360 0 49351 38282 clwin
3360 0 49298 38282 clwin
3360 0 49298 38282 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
0 -589 29147 5300 dls
29147 5132 dlt
126 126 dlv
85 42 dlv
126 0 dlv
84 -42 dlv
42 -126 dlv
0 -421 dlv
dle
29610 5132 dlt
126 126 dlv
84 42 dlv
127 0 dlv
84 -42 dlv
42 -126 dlv
0 -421 dlv
dle
30451 5300 dlt
-42 -42 dlv
42 -42 dlv
42 42 dlv
-42 42 dlv
dle
30451 4795 dlt
-42 -42 dlv
42 -42 dlv
42 42 dlv
-42 42 dlv
dle
30914 5426 dlt
84 42 dlv
126 127 dlv
0 -884 dlv
dle
0 -1178 29056 7803 dls
1009 0 29505 7298 dls
1009 0 29505 6962 dls
31075 7579 dlt
113 56 dlv
168 168 dlv
0 -1178 dlv
dle
32141 7803 dlt
-168 -56 dlv
-56 -112 dlv
0 -112 dlv
56 -112 dlv
112 -57 dlv
224 -56 dlv
169 -56 dlv
112 -112 dlv
56 -112 dlv
0 -168 dlv
-56 -113 dlv
-56 -56 dlv
-169 -56 dlv
-224 0 dlv
-168 56 dlv
-56 56 dlv
-56 113 dlv
0 168 dlv
56 112 dlv
112 112 dlv
168 56 dlv
225 56 dlv
112 57 dlv
56 112 dlv
0 112 dlv
-56 112 dlv
-169 56 dlv
-224 0 dlv
dle
33319 7803 dlt
-168 -56 dlv
-112 -168 dlv
-57 -281 dlv
0 -168 dlv
57 -280 dlv
112 -169 dlv
168 -56 dlv
112 0 dlv
168 56 dlv
113 169 dlv
56 280 dlv
0 168 dlv
-56 281 dlv
-113 168 dlv
-168 56 dlv
-112 0 dlv
dle
-786 -1178 33768 7803 dls
34216 6737 dlt
-56 -56 dlv
56 -56 dlv
57 56 dlv
-57 56 dlv
dle
35002 7803 dlt
-169 -56 dlv
-112 -168 dlv
-56 -281 dlv
0 -168 dlv
56 -280 dlv
112 -169 dlv
169 -56 dlv
112 0 dlv
168 56 dlv
112 169 dlv
56 280 dlv
0 168 dlv
-56 281 dlv
-112 168 dlv
-168 56 dlv
-112 0 dlv
dle
-785 -1178 35450 7803 dls
0 -786 35843 7411 dls
35843 7186 dlt
168 168 dlv
113 57 dlv
168 0 dlv
112 -57 dlv
56 -168 dlv
0 -561 dlv
dle
29000 9619 dlt
224 -785 dlv
225 785 dlv
224 -785 dlv
224 785 dlv
dle
1010 0 30290 9507 dls
1010 0 30290 9170 dls
31861 9787 dlt
112 56 dlv
168 169 dlv
0 -1178 dlv
dle
32758 8946 dlt
-56 -56 dlv
56 -56 dlv
56 56 dlv
-56 56 dlv
dle
33487 10012 dlt
-168 -56 dlv
-56 -113 dlv
0 -112 dlv
56 -112 dlv
112 -56 dlv
225 -56 dlv
168 -56 dlv
112 -112 dlv
56 -113 dlv
0 -168 dlv
-56 -112 dlv
-56 -56 dlv
-168 -56 dlv
-225 0 dlv
-168 56 dlv
-56 56 dlv
-56 112 dlv
0 168 dlv
56 113 dlv
112 112 dlv
168 56 dlv
225 56 dlv
112 56 dlv
56 112 dlv
0 112 dlv
-56 113 dlv
-168 56 dlv
-225 0 dlv
dle
34385 9619 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
169 168 dlv
dle
0 -785 35002 9619 dls
29042 11926 dlt
0 -715 dlv
42 -127 dlv
84 -42 dlv
84 0 dlv
dle
294 0 28916 11631 dls
29926 11505 dlt
-43 84 dlv
-126 42 dlv
-126 0 dlv
-126 -42 dlv
-42 -84 dlv
42 -84 dlv
84 -42 dlv
210 -42 dlv
84 -42 dlv
43 -84 dlv
0 -42 dlv
-43 -85 dlv
-126 -42 dlv
-126 0 dlv
-126 42 dlv
-42 85 dlv
dle
0 -589 30220 11631 dls
30220 11463 dlt
126 126 dlv
84 42 dlv
127 0 dlv
84 -42 dlv
42 -126 dlv
0 -421 dlv
dle
30683 11463 dlt
126 126 dlv
84 42 dlv
126 0 dlv
84 -42 dlv
43 -126 dlv
0 -421 dlv
dle
31945 11505 dlt
-84 84 dlv
-84 42 dlv
-127 0 dlv
-84 -42 dlv
-84 -84 dlv
-42 -126 dlv
0 -84 dlv
42 -126 dlv
84 -85 dlv
84 -42 dlv
127 0 dlv
84 42 dlv
84 85 dlv
dle
32323 11758 dlt
85 42 dlv
126 126 dlv
0 -884 dlv
dle
33123 11926 dlt
-127 -42 dlv
-42 -84 dlv
0 -85 dlv
42 -84 dlv
85 -42 dlv
168 -42 dlv
126 -42 dlv
84 -84 dlv
42 -84 dlv
0 -126 dlv
-42 -84 dlv
-42 -43 dlv
-126 -42 dlv
-168 0 dlv
-127 42 dlv
-42 43 dlv
-42 84 dlv
0 126 dlv
42 84 dlv
85 84 dlv
126 42 dlv
168 42 dlv
84 42 dlv
42 84 dlv
0 85 dlv
-42 84 dlv
-126 42 dlv
-168 0 dlv
dle
0 -884 34259 11926 dls
34259 11505 dlt
-85 84 dlv
-84 42 dlv
-126 0 dlv
-84 -42 dlv
-84 -84 dlv
-42 -126 dlv
0 -84 dlv
42 -126 dlv
84 -85 dlv
84 -42 dlv
126 0 dlv
84 42 dlv
85 85 dlv
dle
34595 11042 dlt
0 884 dlv
589 -884 dlv
0 884 dlv
dle
0 -589 29000 21644 dls
29000 21475 dlt
126 126 dlv
84 43 dlv
127 0 dlv
84 -43 dlv
42 -126 dlv
0 -420 dlv
dle
29463 21475 dlt
126 126 dlv
84 43 dlv
126 0 dlv
84 -43 dlv
43 -126 dlv
0 -420 dlv
dle
30304 21644 dlt
-42 -43 dlv
42 -42 dlv
42 42 dlv
-42 43 dlv
dle
30304 21139 dlt
-42 -42 dlv
42 -42 dlv
42 42 dlv
-42 42 dlv
dle
30767 21770 dlt
84 42 dlv
126 126 dlv
0 -883 dlv
dle
0 -1178 29056 23999 dls
1009 0 29505 23495 dls
1009 0 29505 23158 dls
31075 23775 dlt
113 56 dlv
168 168 dlv
0 -1178 dlv
dle
32141 23999 dlt
-168 -56 dlv
-56 -112 dlv
0 -112 dlv
56 -112 dlv
112 -56 dlv
224 -56 dlv
169 -57 dlv
112 -112 dlv
56 -112 dlv
0 -168 dlv
-56 -112 dlv
-56 -56 dlv
-169 -57 dlv
-224 0 dlv
-168 57 dlv
-56 56 dlv
-56 112 dlv
0 168 dlv
56 112 dlv
112 112 dlv
168 57 dlv
225 56 dlv
112 56 dlv
56 112 dlv
0 112 dlv
-56 112 dlv
-169 56 dlv
-224 0 dlv
dle
33319 23999 dlt
-168 -56 dlv
-112 -168 dlv
-57 -280 dlv
0 -169 dlv
57 -280 dlv
112 -168 dlv
168 -57 dlv
112 0 dlv
168 57 dlv
113 168 dlv
56 280 dlv
0 169 dlv
-56 280 dlv
-113 168 dlv
-168 56 dlv
-112 0 dlv
dle
-786 -1178 33768 23999 dls
34216 22934 dlt
-56 -56 dlv
56 -57 dlv
57 57 dlv
-57 56 dlv
dle
35002 23999 dlt
-169 -56 dlv
-112 -168 dlv
-56 -280 dlv
0 -169 dlv
56 -280 dlv
112 -168 dlv
169 -57 dlv
112 0 dlv
168 57 dlv
112 168 dlv
56 280 dlv
0 169 dlv
-56 280 dlv
-112 168 dlv
-168 56 dlv
-112 0 dlv
dle
-785 -1178 35450 23999 dls
0 -786 35843 23607 dls
35843 23382 dlt
168 169 dlv
113 56 dlv
168 0 dlv
112 -56 dlv
56 -169 dlv
0 -561 dlv
dle
29000 25815 dlt
224 -785 dlv
225 785 dlv
224 -785 dlv
224 785 dlv
dle
1010 0 30290 25703 dls
1010 0 30290 25367 dls
31805 26208 dlt
617 0 dlv
-337 -449 dlv
168 0 dlv
112 -56 dlv
57 -56 dlv
56 -168 dlv
0 -112 dlv
-56 -169 dlv
-113 -112 dlv
-168 -56 dlv
-168 0 dlv
-168 56 dlv
-57 56 dlv
-56 112 dlv
dle
32926 25142 dlt
-56 -56 dlv
56 -56 dlv
56 56 dlv
-56 56 dlv
dle
34104 26040 dlt
-56 112 dlv
-168 56 dlv
-112 0 dlv
-169 -56 dlv
-112 -168 dlv
-56 -281 dlv
0 -280 dlv
56 -225 dlv
112 -112 dlv
169 -56 dlv
56 0 dlv
168 56 dlv
112 112 dlv
56 169 dlv
0 56 dlv
-56 168 dlv
-112 112 dlv
-168 56 dlv
-56 0 dlv
-169 -56 dlv
-112 -112 dlv
-56 -168 dlv
dle
34553 25815 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
168 168 dlv
dle
0 -785 35170 25815 dls
29042 28122 dlt
0 -715 dlv
42 -126 dlv
84 -42 dlv
84 0 dlv
dle
294 0 28916 27828 dls
29926 27701 dlt
-43 85 dlv
-126 42 dlv
-126 0 dlv
-126 -42 dlv
-42 -85 dlv
42 -84 dlv
84 -42 dlv
210 -42 dlv
84 -42 dlv
43 -84 dlv
0 -42 dlv
-43 -84 dlv
-126 -42 dlv
-126 0 dlv
-126 42 dlv
-42 84 dlv
dle
0 -589 30220 27828 dls
30220 27659 dlt
126 127 dlv
84 42 dlv
127 0 dlv
84 -42 dlv
42 -127 dlv
0 -420 dlv
dle
30683 27659 dlt
126 127 dlv
84 42 dlv
126 0 dlv
84 -42 dlv
43 -127 dlv
0 -420 dlv
dle
31945 27701 dlt
-84 85 dlv
-84 42 dlv
-127 0 dlv
-84 -42 dlv
-84 -85 dlv
-42 -126 dlv
0 -84 dlv
42 -126 dlv
84 -84 dlv
84 -42 dlv
127 0 dlv
84 42 dlv
84 84 dlv
dle
32323 27954 dlt
85 42 dlv
126 126 dlv
0 -883 dlv
dle
33123 28122 dlt
-127 -42 dlv
-42 -84 dlv
0 -84 dlv
42 -84 dlv
85 -42 dlv
168 -43 dlv
126 -42 dlv
84 -84 dlv
42 -84 dlv
0 -126 dlv
-42 -84 dlv
-42 -42 dlv
-126 -42 dlv
-168 0 dlv
-127 42 dlv
-42 42 dlv
-42 84 dlv
0 126 dlv
42 84 dlv
85 84 dlv
126 42 dlv
168 43 dlv
84 42 dlv
42 84 dlv
0 84 dlv
-42 84 dlv
-126 42 dlv
-168 0 dlv
dle
0 -883 34259 28122 dls
34259 27701 dlt
-85 85 dlv
-84 42 dlv
-126 0 dlv
-84 -42 dlv
-84 -85 dlv
-42 -126 dlv
0 -84 dlv
42 -126 dlv
84 -84 dlv
84 -42 dlv
126 0 dlv
84 42 dlv
85 84 dlv
dle
34595 27239 dlt
0 883 dlv
379 0 dlv
126 -42 dlv
42 -42 dlv
42 -84 dlv
0 -126 dlv
-42 -85 dlv
-42 -42 dlv
-126 -42 dlv
-379 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
29056 13251 dlt
0 1178 dlv
785 -1178 dlv
0 1178 dlv
dle
30571 14429 dlt
-169 -56 dlv
-112 -168 dlv
-56 -281 dlv
0 -168 dlv
56 -281 dlv
112 -168 dlv
169 -56 dlv
112 0 dlv
168 56 dlv
112 168 dlv
56 281 dlv
0 168 dlv
-56 281 dlv
-112 168 dlv
-168 56 dlv
-112 0 dlv
dle
-785 -1178 31019 14429 dls
29056 29447 dlt
0 1178 dlv
505 0 dlv
168 -56 dlv
56 -56 dlv
56 -112 dlv
0 -169 dlv
-56 -112 dlv
-56 -56 dlv
-168 -56 dlv
-505 0 dlv
dle
30514 30625 dlt
-168 -56 dlv
-112 -168 dlv
-56 -281 dlv
0 -168 dlv
56 -280 dlv
112 -169 dlv
168 -56 dlv
113 0 dlv
168 56 dlv
112 169 dlv
56 280 dlv
0 168 dlv
-56 281 dlv
-112 168 dlv
-168 56 dlv
-113 0 dlv
dle
-785 -1178 30963 30625 dls
1000 902 749 slc
1000 902 749 sfc
24225 6822 dlt
0 -898 dlv
-56 -168 dlv
-56 -56 dlv
-112 -56 dlv
-168 0 dlv
-113 56 dlv
dle
24225 6653 dlt
-112 112 dlv
-112 57 dlv
-168 0 dlv
-113 -57 dlv
-112 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -168 dlv
112 -113 dlv
113 -56 dlv
168 0 dlv
112 56 dlv
112 113 dlv
dle
0 -786 24674 6822 dls
24674 6597 dlt
168 168 dlv
112 57 dlv
169 0 dlv
112 -57 dlv
56 -168 dlv
0 -561 dlv
dle
0 -1178 26357 7214 dls
26357 6653 dlt
-112 112 dlv
-113 57 dlv
-168 0 dlv
-112 -57 dlv
-112 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -168 dlv
112 -113 dlv
112 -56 dlv
168 0 dlv
113 56 dlv
112 113 dlv
dle
0 -785 26862 7214 dls
26862 6148 dlt
-57 -56 dlv
57 -56 dlv
56 56 dlv
-56 56 dlv
dle
20166 12368 dlt
56 -57 dlv
56 57 dlv
-56 56 dlv
-56 -56 dlv
dle
0 -785 20222 11975 dls
0 -785 20671 11975 dls
20671 11751 dlt
168 168 dlv
112 56 dlv
168 0 dlv
112 -56 dlv
57 -168 dlv
0 -561 dlv
dle
0 -1178 21736 11975 dls
21736 11807 dlt
112 112 dlv
113 56 dlv
168 0 dlv
112 -56 dlv
112 -112 dlv
56 -169 dlv
0 -112 dlv
-56 -168 dlv
-112 -112 dlv
-112 -56 dlv
-168 0 dlv
-113 56 dlv
-112 112 dlv
dle
22802 11975 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
168 168 dlv
dle
0 -785 23419 11975 dls
23924 12368 dlt
0 -954 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
392 0 23756 11975 dls
25992 11975 dlt
0 -898 dlv
-56 -168 dlv
-56 -56 dlv
-112 -56 dlv
-168 0 dlv
-113 56 dlv
dle
25992 11807 dlt
-112 112 dlv
-112 56 dlv
-168 0 dlv
-113 -56 dlv
-112 -112 dlv
-56 -169 dlv
0 -112 dlv
56 -168 dlv
112 -112 dlv
113 -56 dlv
168 0 dlv
112 56 dlv
112 112 dlv
dle
0 -785 26441 11975 dls
26441 11751 dlt
168 168 dlv
112 56 dlv
169 0 dlv
112 -56 dlv
56 -168 dlv
0 -561 dlv
dle
0 -1178 28124 12368 dls
28124 11807 dlt
-113 112 dlv
-112 56 dlv
-168 0 dlv
-112 -56 dlv
-112 -112 dlv
-56 -169 dlv
0 -112 dlv
56 -168 dlv
112 -112 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
113 112 dlv
dle
0 -786 28628 12368 dls
28628 11302 dlt
-56 -56 dlv
56 -56 dlv
57 56 dlv
-57 56 dlv
dle
22066 14036 dlt
-112 -56 dlv
-113 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -169 dlv
113 -112 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
112 112 dlv
57 169 dlv
0 112 dlv
-57 168 dlv
-112 112 dlv
-112 56 dlv
-168 0 dlv
dle
22907 14036 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
168 168 dlv
dle
0 -785 23524 14036 dls
24029 14429 dlt
0 -954 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
392 0 23861 14036 dls
0 -1178 24646 14036 dls
24646 13868 dlt
112 112 dlv
112 56 dlv
169 0 dlv
112 -56 dlv
112 -112 dlv
56 -168 dlv
0 -112 dlv
-56 -169 dlv
-112 -112 dlv
-112 -56 dlv
-169 0 dlv
-112 56 dlv
-112 112 dlv
dle
25712 14036 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
169 168 dlv
dle
0 -785 26329 14036 dls
26834 14429 dlt
0 -954 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
393 0 26665 14036 dls
22066 23018 dlt
-112 -56 dlv
-113 -112 dlv
-56 -169 dlv
0 -112 dlv
56 -168 dlv
113 -112 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
112 112 dlv
57 168 dlv
0 112 dlv
-57 169 dlv
-112 112 dlv
-112 56 dlv
-168 0 dlv
dle
22907 23018 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
168 168 dlv
dle
0 -785 23524 23018 dls
24029 23410 dlt
0 -953 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
392 0 23861 23018 dls
0 -1178 24646 23018 dls
24646 22850 dlt
112 112 dlv
112 56 dlv
169 0 dlv
112 -56 dlv
112 -112 dlv
56 -169 dlv
0 -112 dlv
-56 -168 dlv
-112 -112 dlv
-112 -56 dlv
-169 0 dlv
-112 56 dlv
-112 112 dlv
dle
25712 23018 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
169 168 dlv
dle
0 -785 26329 23018 dls
26834 23410 dlt
0 -953 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
393 0 26665 23018 dls
20166 28564 dlt
56 -56 dlv
56 56 dlv
-56 56 dlv
-56 -56 dlv
dle
0 -785 20222 28171 dls
0 -785 20671 28171 dls
20671 27947 dlt
168 168 dlv
112 56 dlv
168 0 dlv
112 -56 dlv
57 -168 dlv
0 -561 dlv
dle
0 -1178 21736 28171 dls
21736 28003 dlt
112 112 dlv
113 56 dlv
168 0 dlv
112 -56 dlv
112 -112 dlv
56 -168 dlv
0 -113 dlv
-56 -168 dlv
-112 -112 dlv
-112 -56 dlv
-168 0 dlv
-113 56 dlv
-112 112 dlv
dle
22802 28171 dlt
0 -561 dlv
56 -168 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
168 168 dlv
dle
0 -785 23419 28171 dls
23924 28564 dlt
0 -954 dlv
56 -168 dlv
112 -56 dlv
112 0 dlv
dle
392 0 23756 28171 dls
26441 28318 dlt
336 -785 dlv
337 785 dlv
dle
0 -1178 28068 28711 dls
28068 28150 dlt
-113 112 dlv
-112 56 dlv
-168 0 dlv
-112 -56 dlv
-112 -112 dlv
-57 -168 dlv
0 -112 dlv
57 -169 dlv
112 -112 dlv
112 -56 dlv
168 0 dlv
112 56 dlv
113 112 dlv
dle
0 -1178 29133 28711 dls
29133 28150 dlt
-112 112 dlv
-112 56 dlv
-168 0 dlv
-113 -56 dlv
-112 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -169 dlv
112 -112 dlv
113 -56 dlv
168 0 dlv
112 56 dlv
112 112 dlv
dle
0 -785 29638 28711 dls
29638 27645 dlt
-56 -56 dlv
56 -56 dlv
56 56 dlv
-56 56 dlv
dle
23791 30232 dlt
336 -785 dlv
337 785 dlv
dle
0 -1178 25417 30625 dls
25417 30064 dlt
-112 112 dlv
-112 56 dlv
-168 0 dlv
-113 -56 dlv
-112 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -169 dlv
112 -112 dlv
113 -56 dlv
168 0 dlv
112 56 dlv
112 112 dlv
dle
0 -1178 26483 30625 dls
26483 30064 dlt
-112 112 dlv
-112 56 dlv
-169 0 dlv
-112 -56 dlv
-112 -112 dlv
-56 -168 dlv
0 -112 dlv
56 -169 dlv
112 -112 dlv
112 -56 dlv
169 0 dlv
112 56 dlv
112 112 dlv
dle
0 -785 26988 30625 dls
26988 29559 dlt
-56 -56 dlv
56 -56 dlv
56 56 dlv
-56 56 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -4417 28096 5889 dls
26623 1472 dpb
29568 1472 dpv
28096 0 dpv
dpu
2945 0 22206 10306 dls
0 -4417 25151 12515 dls
28096 14723 dlt
0 -2208 dlv
-2209 0 dlv
0 -4417 dlv
2209 0 dlv
0 -2209 dlv
dle
2209 0 25887 10306 dls
28096 8098 dlt
-737 441 dlv
0 -883 dlv
737 442 dlv
dle
1472 0 22206 26502 dls
24415 26502 736 dcu
0 -4417 25151 28711 dls
25887 28711 dlt
736 -442 dlv
0 884 dlv
-736 -442 dlv
dle
28096 30920 dlt
0 -2209 dlv
-2209 0 dlv
0 -4417 dlv
2209 0 dlv
0 -2209 dlv
dle
2209 0 25887 26502 dls
0 5889 28096 30920 dls
7362 0 24415 36809 dls
224 749 1000 slc
224 749 1000 sfc
10307 0 11899 19141 dls
0 8835 22206 10306 dls
0 7361 22206 19141 dls
22206 19141 736 dcs
0 4418 28096 14723 dls
0 2944 28096 19141 dls
28096 19141 736 dcs
8834 0 28096 5889 dls
8834 0 28096 10306 dls
8834 0 28096 30920 dls
8834 0 28096 26502 dls
0 4417 36930 5889 dls
0 4418 36930 26502 dls
11779 0 28096 19141 dls
1000 0 0 slc
1000 0 0 sfc
42644 19386 dlt
-140 -70 dlv
-140 -140 dlv
-70 -211 dlv
0 -140 dlv
70 -210 dlv
140 -141 dlv
140 -70 dlv
210 0 dlv
141 70 dlv
140 141 dlv
70 210 dlv
0 140 dlv
-70 211 dlv
-140 140 dlv
-141 70 dlv
-210 0 dlv
dle
43696 19386 dlt
0 -701 dlv
70 -211 dlv
140 -70 dlv
211 0 dlv
140 70 dlv
210 211 dlv
dle
0 -982 44467 19386 dls
45098 19877 dlt
0 -1192 dlv
70 -211 dlv
140 -70 dlv
141 0 dlv
dle
491 0 44888 19386 dls
0 -1472 45869 19386 dls
45869 19176 dlt
141 140 dlv
140 70 dlv
210 0 dlv
140 -70 dlv
141 -140 dlv
70 -211 dlv
0 -140 dlv
-70 -210 dlv
-141 -141 dlv
-140 -70 dlv
-210 0 dlv
-140 70 dlv
-141 141 dlv
dle
47202 19386 dlt
0 -701 dlv
70 -211 dlv
140 -70 dlv
210 0 dlv
140 70 dlv
211 211 dlv
dle
0 -982 47973 19386 dls
48604 19877 dlt
0 -1192 dlv
70 -211 dlv
140 -70 dlv
140 0 dlv
dle
491 0 48393 19386 dls
3570 19842 dlt
70 -70 dlv
70 70 dlv
-70 70 dlv
-70 -70 dlv
dle
0 -982 3640 19351 dls
0 -982 4201 19351 dls
4201 19070 dlt
210 211 dlv
140 70 dlv
211 0 dlv
140 -70 dlv
70 -211 dlv
0 -701 dlv
dle
0 -1473 5533 19351 dls
5533 19141 dlt
140 140 dlv
140 70 dlv
211 0 dlv
140 -70 dlv
140 -140 dlv
70 -211 dlv
0 -140 dlv
-70 -210 dlv
-140 -141 dlv
-140 -70 dlv
-211 0 dlv
-140 70 dlv
-140 141 dlv
dle
6865 19351 dlt
0 -701 dlv
70 -211 dlv
141 -70 dlv
210 0 dlv
140 70 dlv
210 211 dlv
dle
0 -982 7636 19351 dls
8267 19842 dlt
0 -1192 dlv
71 -211 dlv
140 -70 dlv
140 0 dlv
dle
491 0 8057 19351 dls
30304 3631 dlt
0 -785 dlv
-49 -147 dlv
-49 -49 dlv
-98 -49 dlv
-147 0 dlv
-99 49 dlv
dle
30304 3484 dlt
-98 98 dlv
-98 49 dlv
-147 0 dlv
-99 -49 dlv
-98 -98 dlv
-49 -147 dlv
0 -98 dlv
49 -147 dlv
98 -99 dlv
99 -49 dlv
147 0 dlv
98 49 dlv
98 99 dlv
dle
0 -687 30697 3631 dls
30697 3435 dlt
147 147 dlv
98 49 dlv
147 0 dlv
99 -49 dlv
49 -147 dlv
0 -491 dlv
dle
0 -1031 32169 3975 dls
32169 3484 dlt
-98 98 dlv
-98 49 dlv
-147 0 dlv
-99 -49 dlv
-98 -98 dlv
-49 -147 dlv
0 -98 dlv
49 -147 dlv
98 -99 dlv
99 -49 dlv
147 0 dlv
98 49 dlv
98 99 dlv
dle
29666 34551 dlt
295 -687 dlv
294 687 dlv
dle
0 -1031 31089 34895 dls
31089 34404 dlt
-98 98 dlv
-98 49 dlv
-147 0 dlv
-98 -49 dlv
-98 -98 dlv
-50 -147 dlv
0 -98 dlv
50 -147 dlv
98 -99 dlv
98 -49 dlv
147 0 dlv
98 49 dlv
98 99 dlv
dle
0 -1031 32022 34895 dls
32022 34404 dlt
-98 98 dlv
-98 49 dlv
-148 0 dlv
-98 -49 dlv
-98 -98 dlv
-49 -147 dlv
0 -98 dlv
49 -147 dlv
98 -99 dlv
98 -49 dlv
148 0 dlv
98 49 dlv
98 99 dlv
dle
1000 0 0 slc
1000 0 0 sfc
27507 5300 28685 6478 dbs
21617 9717 22795 10895 dbs
27507 14134 28685 15312 dbs
27507 5300 28685 6478 dbs
27507 9717 28685 10895 dbs
10427 17815 dpb
10427 20466 dpv
12047 20466 dpv
13372 19141 dpv
12047 17815 dpv
dps
38402 17815 dpb
38402 20466 dpv
40022 20466 dpv
41347 19141 dpv
40022 17815 dpv
dps
21617 25913 22795 27091 dbs
27507 21496 28685 22674 dbs
27507 30331 28685 31509 dbs
27507 25913 28685 27091 dbs
27507 30331 28685 31509 dbs
3360 0 49440 38282 clwin
gfs
%%Trailer
%%EOF
